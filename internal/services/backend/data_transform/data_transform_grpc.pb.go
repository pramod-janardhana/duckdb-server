// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: data_transform.proto

package backend_data_transform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataTransform_Load_FullMethodName           = "/backend_data_transform.DataTransform/Load"
	DataTransform_QueryArrow_FullMethodName     = "/backend_data_transform.DataTransform/QueryArrow"
	DataTransform_WriteToParquet_FullMethodName = "/backend_data_transform.DataTransform/WriteToParquet"
	DataTransform_Clear_FullMethodName          = "/backend_data_transform.DataTransform/Clear"
)

// DataTransformClient is the client API for DataTransform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type DataTransformClient interface {
	Load(ctx context.Context, in *LoadRequests, opts ...grpc.CallOption) (*LoadResponse, error)
	QueryArrow(ctx context.Context, in *QueryArrowRequests, opts ...grpc.CallOption) (DataTransform_QueryArrowClient, error)
	WriteToParquet(ctx context.Context, in *WriteToParquetRequests, opts ...grpc.CallOption) (*WriteToParquetResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
}

type dataTransformClient struct {
	cc grpc.ClientConnInterface
}

func NewDataTransformClient(cc grpc.ClientConnInterface) DataTransformClient {
	return &dataTransformClient{cc}
}

func (c *dataTransformClient) Load(ctx context.Context, in *LoadRequests, opts ...grpc.CallOption) (*LoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, DataTransform_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransformClient) QueryArrow(ctx context.Context, in *QueryArrowRequests, opts ...grpc.CallOption) (DataTransform_QueryArrowClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTransform_ServiceDesc.Streams[0], DataTransform_QueryArrow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataTransformQueryArrowClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataTransform_QueryArrowClient interface {
	Recv() (*QueryArrowResponse, error)
	grpc.ClientStream
}

type dataTransformQueryArrowClient struct {
	grpc.ClientStream
}

func (x *dataTransformQueryArrowClient) Recv() (*QueryArrowResponse, error) {
	m := new(QueryArrowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataTransformClient) WriteToParquet(ctx context.Context, in *WriteToParquetRequests, opts ...grpc.CallOption) (*WriteToParquetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteToParquetResponse)
	err := c.cc.Invoke(ctx, DataTransform_WriteToParquet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataTransformClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, DataTransform_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataTransformServer is the server API for DataTransform service.
// All implementations must embed UnimplementedDataTransformServer
// for forward compatibility
//
// Interface exported by the server.
type DataTransformServer interface {
	Load(context.Context, *LoadRequests) (*LoadResponse, error)
	QueryArrow(*QueryArrowRequests, DataTransform_QueryArrowServer) error
	WriteToParquet(context.Context, *WriteToParquetRequests) (*WriteToParquetResponse, error)
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	mustEmbedUnimplementedDataTransformServer()
}

// UnimplementedDataTransformServer must be embedded to have forward compatible implementations.
type UnimplementedDataTransformServer struct {
}

func (UnimplementedDataTransformServer) Load(context.Context, *LoadRequests) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedDataTransformServer) QueryArrow(*QueryArrowRequests, DataTransform_QueryArrowServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryArrow not implemented")
}
func (UnimplementedDataTransformServer) WriteToParquet(context.Context, *WriteToParquetRequests) (*WriteToParquetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToParquet not implemented")
}
func (UnimplementedDataTransformServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedDataTransformServer) mustEmbedUnimplementedDataTransformServer() {}

// UnsafeDataTransformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataTransformServer will
// result in compilation errors.
type UnsafeDataTransformServer interface {
	mustEmbedUnimplementedDataTransformServer()
}

func RegisterDataTransformServer(s grpc.ServiceRegistrar, srv DataTransformServer) {
	s.RegisterService(&DataTransform_ServiceDesc, srv)
}

func _DataTransform_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransformServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransform_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransformServer).Load(ctx, req.(*LoadRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransform_QueryArrow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryArrowRequests)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataTransformServer).QueryArrow(m, &dataTransformQueryArrowServer{ServerStream: stream})
}

type DataTransform_QueryArrowServer interface {
	Send(*QueryArrowResponse) error
	grpc.ServerStream
}

type dataTransformQueryArrowServer struct {
	grpc.ServerStream
}

func (x *dataTransformQueryArrowServer) Send(m *QueryArrowResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataTransform_WriteToParquet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteToParquetRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransformServer).WriteToParquet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransform_WriteToParquet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransformServer).WriteToParquet(ctx, req.(*WriteToParquetRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataTransform_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTransformServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataTransform_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTransformServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataTransform_ServiceDesc is the grpc.ServiceDesc for DataTransform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataTransform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend_data_transform.DataTransform",
	HandlerType: (*DataTransformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _DataTransform_Load_Handler,
		},
		{
			MethodName: "WriteToParquet",
			Handler:    _DataTransform_WriteToParquet_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _DataTransform_Clear_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryArrow",
			Handler:       _DataTransform_QueryArrow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data_transform.proto",
}
