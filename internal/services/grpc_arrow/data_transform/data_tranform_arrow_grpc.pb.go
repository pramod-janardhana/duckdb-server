// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: internal/services/grpc_arrow/data_transform/data_tranform_arrow.proto

package data_transform_arrow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataTransform_TransformAndStreamArrow_FullMethodName        = "/data_transform_arrow.DataTransform/TransformAndStreamArrow"
	DataTransform_TransformAndStreamParquet_FullMethodName      = "/data_transform_arrow.DataTransform/TransformAndStreamParquet"
	DataTransform_LocalTransformAndStreamArrow_FullMethodName   = "/data_transform_arrow.DataTransform/LocalTransformAndStreamArrow"
	DataTransform_LocalTransformAndStreamParquet_FullMethodName = "/data_transform_arrow.DataTransform/LocalTransformAndStreamParquet"
)

// DataTransformClient is the client API for DataTransform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type DataTransformClient interface {
	// A server-to-client streaming RPC.
	TransformAndStreamArrow(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_TransformAndStreamArrowClient, error)
	TransformAndStreamParquet(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_TransformAndStreamParquetClient, error)
	LocalTransformAndStreamArrow(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_LocalTransformAndStreamArrowClient, error)
	LocalTransformAndStreamParquet(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_LocalTransformAndStreamParquetClient, error)
}

type dataTransformClient struct {
	cc grpc.ClientConnInterface
}

func NewDataTransformClient(cc grpc.ClientConnInterface) DataTransformClient {
	return &dataTransformClient{cc}
}

func (c *dataTransformClient) TransformAndStreamArrow(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_TransformAndStreamArrowClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTransform_ServiceDesc.Streams[0], DataTransform_TransformAndStreamArrow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataTransformTransformAndStreamArrowClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataTransform_TransformAndStreamArrowClient interface {
	Recv() (*QueryOut, error)
	grpc.ClientStream
}

type dataTransformTransformAndStreamArrowClient struct {
	grpc.ClientStream
}

func (x *dataTransformTransformAndStreamArrowClient) Recv() (*QueryOut, error) {
	m := new(QueryOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataTransformClient) TransformAndStreamParquet(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_TransformAndStreamParquetClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTransform_ServiceDesc.Streams[1], DataTransform_TransformAndStreamParquet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataTransformTransformAndStreamParquetClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataTransform_TransformAndStreamParquetClient interface {
	Recv() (*QueryOut, error)
	grpc.ClientStream
}

type dataTransformTransformAndStreamParquetClient struct {
	grpc.ClientStream
}

func (x *dataTransformTransformAndStreamParquetClient) Recv() (*QueryOut, error) {
	m := new(QueryOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataTransformClient) LocalTransformAndStreamArrow(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_LocalTransformAndStreamArrowClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTransform_ServiceDesc.Streams[2], DataTransform_LocalTransformAndStreamArrow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataTransformLocalTransformAndStreamArrowClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataTransform_LocalTransformAndStreamArrowClient interface {
	Recv() (*QueryOut, error)
	grpc.ClientStream
}

type dataTransformLocalTransformAndStreamArrowClient struct {
	grpc.ClientStream
}

func (x *dataTransformLocalTransformAndStreamArrowClient) Recv() (*QueryOut, error) {
	m := new(QueryOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataTransformClient) LocalTransformAndStreamParquet(ctx context.Context, in *QueryIn, opts ...grpc.CallOption) (DataTransform_LocalTransformAndStreamParquetClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTransform_ServiceDesc.Streams[3], DataTransform_LocalTransformAndStreamParquet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataTransformLocalTransformAndStreamParquetClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataTransform_LocalTransformAndStreamParquetClient interface {
	Recv() (*QueryOut, error)
	grpc.ClientStream
}

type dataTransformLocalTransformAndStreamParquetClient struct {
	grpc.ClientStream
}

func (x *dataTransformLocalTransformAndStreamParquetClient) Recv() (*QueryOut, error) {
	m := new(QueryOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataTransformServer is the server API for DataTransform service.
// All implementations must embed UnimplementedDataTransformServer
// for forward compatibility
//
// Interface exported by the server.
type DataTransformServer interface {
	// A server-to-client streaming RPC.
	TransformAndStreamArrow(*QueryIn, DataTransform_TransformAndStreamArrowServer) error
	TransformAndStreamParquet(*QueryIn, DataTransform_TransformAndStreamParquetServer) error
	LocalTransformAndStreamArrow(*QueryIn, DataTransform_LocalTransformAndStreamArrowServer) error
	LocalTransformAndStreamParquet(*QueryIn, DataTransform_LocalTransformAndStreamParquetServer) error
	mustEmbedUnimplementedDataTransformServer()
}

// UnimplementedDataTransformServer must be embedded to have forward compatible implementations.
type UnimplementedDataTransformServer struct {
}

func (UnimplementedDataTransformServer) TransformAndStreamArrow(*QueryIn, DataTransform_TransformAndStreamArrowServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformAndStreamArrow not implemented")
}
func (UnimplementedDataTransformServer) TransformAndStreamParquet(*QueryIn, DataTransform_TransformAndStreamParquetServer) error {
	return status.Errorf(codes.Unimplemented, "method TransformAndStreamParquet not implemented")
}
func (UnimplementedDataTransformServer) LocalTransformAndStreamArrow(*QueryIn, DataTransform_LocalTransformAndStreamArrowServer) error {
	return status.Errorf(codes.Unimplemented, "method LocalTransformAndStreamArrow not implemented")
}
func (UnimplementedDataTransformServer) LocalTransformAndStreamParquet(*QueryIn, DataTransform_LocalTransformAndStreamParquetServer) error {
	return status.Errorf(codes.Unimplemented, "method LocalTransformAndStreamParquet not implemented")
}
func (UnimplementedDataTransformServer) mustEmbedUnimplementedDataTransformServer() {}

// UnsafeDataTransformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataTransformServer will
// result in compilation errors.
type UnsafeDataTransformServer interface {
	mustEmbedUnimplementedDataTransformServer()
}

func RegisterDataTransformServer(s grpc.ServiceRegistrar, srv DataTransformServer) {
	s.RegisterService(&DataTransform_ServiceDesc, srv)
}

func _DataTransform_TransformAndStreamArrow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataTransformServer).TransformAndStreamArrow(m, &dataTransformTransformAndStreamArrowServer{ServerStream: stream})
}

type DataTransform_TransformAndStreamArrowServer interface {
	Send(*QueryOut) error
	grpc.ServerStream
}

type dataTransformTransformAndStreamArrowServer struct {
	grpc.ServerStream
}

func (x *dataTransformTransformAndStreamArrowServer) Send(m *QueryOut) error {
	return x.ServerStream.SendMsg(m)
}

func _DataTransform_TransformAndStreamParquet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataTransformServer).TransformAndStreamParquet(m, &dataTransformTransformAndStreamParquetServer{ServerStream: stream})
}

type DataTransform_TransformAndStreamParquetServer interface {
	Send(*QueryOut) error
	grpc.ServerStream
}

type dataTransformTransformAndStreamParquetServer struct {
	grpc.ServerStream
}

func (x *dataTransformTransformAndStreamParquetServer) Send(m *QueryOut) error {
	return x.ServerStream.SendMsg(m)
}

func _DataTransform_LocalTransformAndStreamArrow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataTransformServer).LocalTransformAndStreamArrow(m, &dataTransformLocalTransformAndStreamArrowServer{ServerStream: stream})
}

type DataTransform_LocalTransformAndStreamArrowServer interface {
	Send(*QueryOut) error
	grpc.ServerStream
}

type dataTransformLocalTransformAndStreamArrowServer struct {
	grpc.ServerStream
}

func (x *dataTransformLocalTransformAndStreamArrowServer) Send(m *QueryOut) error {
	return x.ServerStream.SendMsg(m)
}

func _DataTransform_LocalTransformAndStreamParquet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataTransformServer).LocalTransformAndStreamParquet(m, &dataTransformLocalTransformAndStreamParquetServer{ServerStream: stream})
}

type DataTransform_LocalTransformAndStreamParquetServer interface {
	Send(*QueryOut) error
	grpc.ServerStream
}

type dataTransformLocalTransformAndStreamParquetServer struct {
	grpc.ServerStream
}

func (x *dataTransformLocalTransformAndStreamParquetServer) Send(m *QueryOut) error {
	return x.ServerStream.SendMsg(m)
}

// DataTransform_ServiceDesc is the grpc.ServiceDesc for DataTransform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataTransform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "data_transform_arrow.DataTransform",
	HandlerType: (*DataTransformServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransformAndStreamArrow",
			Handler:       _DataTransform_TransformAndStreamArrow_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransformAndStreamParquet",
			Handler:       _DataTransform_TransformAndStreamParquet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LocalTransformAndStreamArrow",
			Handler:       _DataTransform_LocalTransformAndStreamArrow_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LocalTransformAndStreamParquet",
			Handler:       _DataTransform_LocalTransformAndStreamParquet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/services/grpc_arrow/data_transform/data_tranform_arrow.proto",
}
