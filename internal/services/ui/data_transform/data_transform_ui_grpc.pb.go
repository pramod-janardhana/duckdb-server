// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: data_transform_ui.proto

package turing_ui_data_transform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DataTransform_LoadAndQueryArrow_FullMethodName = "/turing.ui.data_transform.DataTransform/LoadAndQueryArrow"
)

// DataTransformClient is the client API for DataTransform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface exported by the server.
type DataTransformClient interface {
	LoadAndQueryArrow(ctx context.Context, in *LoadAndQueryArrowRequest, opts ...grpc.CallOption) (DataTransform_LoadAndQueryArrowClient, error)
}

type dataTransformClient struct {
	cc grpc.ClientConnInterface
}

func NewDataTransformClient(cc grpc.ClientConnInterface) DataTransformClient {
	return &dataTransformClient{cc}
}

func (c *dataTransformClient) LoadAndQueryArrow(ctx context.Context, in *LoadAndQueryArrowRequest, opts ...grpc.CallOption) (DataTransform_LoadAndQueryArrowClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataTransform_ServiceDesc.Streams[0], DataTransform_LoadAndQueryArrow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &dataTransformLoadAndQueryArrowClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataTransform_LoadAndQueryArrowClient interface {
	Recv() (*LoadAndQueryArrowResponse, error)
	grpc.ClientStream
}

type dataTransformLoadAndQueryArrowClient struct {
	grpc.ClientStream
}

func (x *dataTransformLoadAndQueryArrowClient) Recv() (*LoadAndQueryArrowResponse, error) {
	m := new(LoadAndQueryArrowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataTransformServer is the server API for DataTransform service.
// All implementations must embed UnimplementedDataTransformServer
// for forward compatibility
//
// Interface exported by the server.
type DataTransformServer interface {
	LoadAndQueryArrow(*LoadAndQueryArrowRequest, DataTransform_LoadAndQueryArrowServer) error
	mustEmbedUnimplementedDataTransformServer()
}

// UnimplementedDataTransformServer must be embedded to have forward compatible implementations.
type UnimplementedDataTransformServer struct {
}

func (UnimplementedDataTransformServer) LoadAndQueryArrow(*LoadAndQueryArrowRequest, DataTransform_LoadAndQueryArrowServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadAndQueryArrow not implemented")
}
func (UnimplementedDataTransformServer) mustEmbedUnimplementedDataTransformServer() {}

// UnsafeDataTransformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataTransformServer will
// result in compilation errors.
type UnsafeDataTransformServer interface {
	mustEmbedUnimplementedDataTransformServer()
}

func RegisterDataTransformServer(s grpc.ServiceRegistrar, srv DataTransformServer) {
	s.RegisterService(&DataTransform_ServiceDesc, srv)
}

func _DataTransform_LoadAndQueryArrow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadAndQueryArrowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataTransformServer).LoadAndQueryArrow(m, &dataTransformLoadAndQueryArrowServer{ServerStream: stream})
}

type DataTransform_LoadAndQueryArrowServer interface {
	Send(*LoadAndQueryArrowResponse) error
	grpc.ServerStream
}

type dataTransformLoadAndQueryArrowServer struct {
	grpc.ServerStream
}

func (x *dataTransformLoadAndQueryArrowServer) Send(m *LoadAndQueryArrowResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DataTransform_ServiceDesc is the grpc.ServiceDesc for DataTransform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataTransform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "turing.ui.data_transform.DataTransform",
	HandlerType: (*DataTransformServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadAndQueryArrow",
			Handler:       _DataTransform_LoadAndQueryArrow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data_transform_ui.proto",
}
